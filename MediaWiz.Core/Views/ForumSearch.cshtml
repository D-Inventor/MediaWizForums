@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<MediaWiz.Forums.ViewModels.SearchViewModel>
@using MediaWiz.Forums.Interfaces
@using System.Text.RegularExpressions
@using Umbraco.Extensions
@inject IForumCacheService _forumCache;

@{ Layout = "ForumMaster.cshtml";

    int.TryParse(Context.Request.Query["page"], out var pagenum);
    if (pagenum == 0)
    {
        pagenum = 1;
    }
    var pageSize = Model.HasValue("intPageSize") ? Model.Value<int>("intPageSize") : 10;
    var totalPages = (int)Math.Ceiling((double)Model.TotalResults / (double)pageSize);
    ViewBag.Page = pagenum;
    ViewBag.TotalPages = totalPages;
}
<div class="row">
    @await Component.InvokeAsync("Forum",new {Template = "Search"})
</div>
<div class="row">
    @{ if (Model.PagedResult != null && Model.PagedResult.Any())
        {
            <div class="forum-posts col-sm-12">
                <div class="wiz-topics">

                        @foreach (var result in Model.PagedResult)
                        {
                            var post = Umbraco.Content(result.Id);
                            string locked = post.Value<bool>("allowReplies") ? "" : "locked";
                            string solved = post.Value<bool>("answer") ? "solved" : "";
                            var cacheInfo = _forumCache.GetPost(post, "Topic_" + post.Id);
                            <div class="d-flex flex-row flex-wrap topic @locked @solved p-3 mb-2 bg-light">
                                <div class="col-12">
                                @if (post.Value<int>("stickiness") > 0)
                                {
                                    <i class="bi bi-star"></i>
                                }
                                @if (!post.Value<bool>("postType"))
                                {
                                    <a href="@post.Parent.Url()" style="display: block;" title="Navigate to @post.Parent.Value("postTitle")">@post.Parent.Value("postTitle")</a>
                                }
                                else
                                {
                                    <a href="@post.Url()" title="View post @post.Value("postTitle")" style="display: block;">@post.Value("postTitle")</a>

                                }
                            </div>
                                <div class="col-12">
                                    Created: @post.CreateDate.ToString("MMM dd, yyyy")
                                    @if (cacheInfo.latestPost != DateTime.MinValue)
                                    {
                                        <span> - Last update:</span>@cacheInfo.latestPost.ToString("MMM dd, yyyy")
                                    }
                                </div>
                            
                                <div class="col-12 topic-summary pt-1">
                                @if (post.Value<bool>("postType"))
                                {
                                    @Regex.Replace(post.Value<string>("postBody"), "<[^>]*(>|$)", string.Empty)

                                }
                                else
                                {
                                    @Regex.Replace(post.Parent.Value<string>("postBody"), "<[^>]*(>|$)", string.Empty)
                                }
                                    
                                </div>
                            </div>

                        }
                </div>

                @if (totalPages > 1)
                {
                    @await Component.InvokeAsync("Navigation", new { Template = "PagerView", Model = Model })
                }
            </div>
        }
        else
        {
            if (!string.IsNullOrWhiteSpace(Model.query) && !string.IsNullOrWhiteSpace(Model.searchIn))
            {
                <p>No results found in @Model.searchIn for search terms '@Model.query'</p>
            }
        }
    }
</div>